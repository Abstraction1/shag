<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №18." next="section2.xml" prev="index.xml" summ="1">

<h2>Препроцессор.</h2>
<p><b>Препроцессор</b> - это программа, которая производит некоторые (иногда весьма значительные) манипуляции с первоначальным текстом программы перед тем, как он подвергается компиляции. Будучи дословно переведенным, с английского, слово <b>препроцессор</b> означает <b>предварительный обрабатыватель</b></p>
<p>Препроцессоры создают входной текст для компиляторов и могут выполнять следующие функции: </p>
<ul><li><b><i>обработку макроопределений;</i></b></li>
<li><b><i>включение файлов;</i></b></li>
<li><b><i>"рациональную" предобработку;</i></b></li>
<li><b><i>расширение языка.</i></b></li></ul>
<p>Например, весьма часто в программах приходится использовать "ничего не говорящие" числа. Это могут быть какие-то математические константы или размеры используемых в программе массивов и т.д. Общепризнано, что обилие таких констант затрудняет понимание программ и считается признаком плохого стиля программирования. В среде программистов такие константы получили язвительное название <b><i>магических чисел</i></b>. Чтобы программа не изобиловала ими, языки программирования позволяют дать константе <b><i>имя</i></b> и далее использовать его везде вместо самой константы. </p>
<p>    В языке C такую возможность обеспечивает препроцессор. Например, с помощью определений </p>
<example>
#define P1 3.14159
#define E  2.71284
</example>
<p>препроцессор заменит в программе все имена <b>P1</b> и <b>E</b> на соответствующие числовые константы. Теперь, когда вы обнаружите, что неправильно написали приближенное значение основания натуральных логарифмов, вам достаточно исправить единственную строку с определением константы, а не просматривать всю программу: </p>
<example>#define E 2.71828</example>
<p>Препроцессор языка C позволяет переопределять не только константы, но и целиком программные конструкции. Например, можно написать определение: </p>
<example>#define forever for(;;)</example>
<p>и затем всюду писать бесконечные циклы в виде: </p>
<example>forever { &lt;тело цикла&gt; }</example>
<p>А если вам не нравятся фигурные скобки, то определите </p>
<example>
#define begin {
#define end }
</example>
<p>и далее используйте в качестве операторных скобок <b>begin</b> и <b>end</b>, как это делается, например, в языке <b>Pascal</b>. Подобные определения, называемые <b><i>макроопределениями (макросами)</i></b>, могут иметь параметры (и вследствие этого быть еще более мощными), однако об этом чуть позже. </p>
<p>Еще одна важная "услуга" препроцессора - включение в исходный текст содержимого других файлов. Эта возможность в основном используется для того, чтобы снабжать программы какими-то общими для всех файлов определениями. Например, чрезвычайно часто в начале программы на языке C встречается препроцессорная конструкция: </p>
<example>#include &lt;iostream&gt;</example>
<p>Когда исходный текст программы обрабатывается препроцессором, на место этой инструкции ставится содержимое файла <b><i>iostream</i></b>, содержащего макроопределения и объявления данных, необходимых для работы потоков ввода-вывода. </p>
<p><b><i>Оператор (директива) препроцессора</i></b> - это одна строка исходного текста, начинающаяся с символа #, за которым следуют название оператора (<b><i>define, pragma, include, if</i></b>) и операнды. Операторы препроцессора могут появляться в любом месте программы, и их действие распространяется на весь исходный файл. </p>

</lesson>
