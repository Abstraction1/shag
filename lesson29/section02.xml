<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №29" next="section03.xml" prev="section01.xml" summ="1">
<h2>Операции по работе с файлами.</h2>

<p>
Мы с вами уже научились анализировать содержимое файла. Теперь пора научиться оперировать самими файлами. То есть, сейчас мы рассмотрим, такие операции, как переименование, перемещение, удаление и поиск файлов.
</p>

<h4>Набор функций для работы с файлами.</h4>

<h5>stdio.h - переименование и удаление файлов.</h5>

<hr/>

<p><b>rename (char * oldname, char * newname)</b></p>
<p>Переименовывает файл.</p>
<p><b>oldname</b> - путь и текущее имя файла</p>
<p><b>newname</b> - путь и новое имя файла</p>
<p>Функция возвращает 0, если имя файла было успешно изменено, и ненулевое значение,  если замена не произошла.</p>
<tip start="Примечание">Кстати!!! Если указать не только новое имя, но и новый путь - файл будет не только переименован, но и перенесён.</tip>

<hr/>

<p><b>int remove(const char * filename)</b></p>
<p>Удаляет файл.</p>
<p><b>filename</b> - путь и имя файла</p>
<p>Функция возвращает 0, если имя файл был успешно удален, и ненулевое значение,  если удаление не произошло.</p>
<tip start="Примечание">
Помните!!! В момент удаления файл должен быть закрыт. Кроме того, не забывайте, что удаление необратимо.</tip>

<hr/>


<h5>io.h - поиск файлов.</h5>
<hr/>

<p><b>_findfirst(char * path, _finddata_t * fileinfo)</b></p>
<p>Находит файлы по указанному пути, соответсвтующие маске.</p>
<tip start="Примечание">
<b>Маска</b> - строка, критерий поиска, содержащая символы * (любая последовательность любых символов) и ? (любой один символ)   
</tip>
<p><b>path </b>- строка, в которой содержится комбинация пути и маски.</p>
<p><b>fileinfo</b> - указатель на объект структуры, в который запишется информация о найденном файле. Структура содержит следующие поля:</p>

<ol>
<li>
unsigned attrib - содержит информацию об атрибутах файла.
<ul>
<li>_A_NORMAL - Обычный файл без запретов на чтение или запись.</li>
<li>_A_RDONLY - Файл только для чтения.</li>
<li>_A_HIDDEN - Скрытый файл.</li>
<li>_A_SYSTEM - Системный файл.</li>
<li>_A_SUBDIR - Директория.</li>
<li>_A_ARCH - Архивный файл.</li>
</ul>
</li>

<li>time_t time_create - время/дата создания файла (равно -1 для FAT систем).</li>
<li>time_t time_access - время/дата последнего открытия файла (равно -1 для FAT систем).</li>
<li>time_t time_write - время/дата последнего редактирования файла</li>
<li>_fsize_t size - размер файла</li>
<li>char name[260] - имя файла</li>
</ol>
<p>
Если всё пройдет успешно, информация о первом найденном файле запишется в объект структуры _finddata_t. При этом в оперативной памяти сформируется "список", обладающий внутренним указателем, который изначально будет установлен на первом найденном файле. В этом случае функция вернет уникальный номер, связанный с полученной группой файлов.
</p>
<p>
Если поиск завершится неудачей, функция вернет -1.
</p>

<hr/>

<p><b>_findnext(long done, _finddata_t * fileinfo)</b></p>
<p>Функция осуществляет переход на следующий найденный файл в группе.</p>

<p><b>done </b> - уникальный номер группы файлов в памяти.</p>
<p><b>fileinfo</b> - указатель на объект структуры, в который запишется информация о следующем найденном файле.</p>
<p>Если достигнут конец списка файлов, функция вернет -1.</p>

<hr/>

<p><b>_findclose(long done)</b></p>
<p>Функция очищает память от группы найденных файлов.</p>
<p><b>done </b> - уникальный номер группы файлов в памяти.</p>

<hr/>

<h4>Пример программы на работу с файлами.</h4>

<example>

// Здесь находятся функции переименования и удаления
#include &lt;stdio.h&gt;
// Здесь находятся функции для поиска файлов    
#include &lt;io.h&gt;       
#include &lt;string.h&gt;
#include &lt;iostream&gt;
using namespace std;

// Переименовать существующий файл
void RenameFile();

// Удалить существующий файл
void RemoveFile();   

// Поиск файлов в каталоге
void Dir();    

void main()
{
	// предлагаем выбрать пункт меню для выполнения
	cout &lt;&lt; "Please, select preffer number...\n";

	//выбор пользователя
	char ch; 
	do{
		// Переименовать
		cout &lt;&lt; "\n1 - Rename\n";
		// Удалить   
		cout &lt;&lt; "2 - Remove\n";   
		// Просмотреть некоторую папку(каталог)
		cout &lt;&lt; "3 - View some folder\n";	
		// Выход
		cout &lt;&lt; "0 - Exit\n\n";    
		cin &gt;&gt; ch;

		// анализируем и вызываем 
		// соответствующую  функцию
		switch(ch)
		{
			case '1':
				RenameFile();   
			break;
			case '2':
				RemoveFile();   
			break;
			case '3':
				Dir();
			break;
		}			
	} while(ch != '0');      // Выход из программы
}

// Переименовать существующий файл
void RenameFile()       
{
	char oldName[50], newName[50];

	// В одной переменной запомним существующее имя (oldName), 
	cout &lt;&lt; "Enter old name:";
	cin &gt;&gt; oldName;
		
	// А в другой новое имя(newName)
	cout &lt;&lt; "Enter new name:";
	cin &gt;&gt; newName;

	// Произведем переименование и проверку результата
	if (rename(oldName, newName) != 0)
		cout &lt;&lt; "Error!\n Couldn't rename file. Check old and new filename...\n\n";
	else 
		cout &lt;&lt; "Ok...\n\n";
}

// Удалить существующий файл
void RemoveFile()           
{
	char Name[50];
	// Получаем имя и путь к удаляемому файлу
	cout &lt;&lt; "Enter name:";
	cin &gt;&gt; Name;

	//Удаляем файл и проверяем результат	
	if (remove(Name) != 0)
		cout &lt;&lt; "Error!\n Couldn't remove file. Check filename...\n";
	else 
		cout &lt;&lt; "Ok...\n" ;
}

// Поиск файлов в каталоге
void Dir()                        
{
	// Запросим ПУТЬ (например, папка Temp на диске C, запишется 
	// таким вот образом: c:\temp\)
	char path[70];
	cout &lt;&lt; "\nEnter full path (for example, C:\\):";
	cin &gt;&gt; path;
		
	// Запросим маску файлов 
	char mask[15];
	cout &lt;&lt; "\nEnter mask (for example, *.* or *.txt):";
	cin &gt;&gt; mask;

	// Соединив две строки, мы получим результат
	// т.е. что хочет найти пользователь и где
	strcat(path, mask);
		
	// Объявление указателя fileinfo на структуру _finddata_t
	// и создание динамического объекта структуры _finddata_t
    _finddata_t *fileinfo=new _finddata_t;	

	// Начинаем поиск
	long done = _findfirst(path,fileinfo);

	// если done будет равняться -1, 
	// то поиск вести бесмысленно
	int MayWeWork = done;	

	// Счетчик, содержит информацию о количестве найденых файлов.	
	int count = 0;   
	while (MayWeWork!=-1)
	{	
		count++;
		// Распечатали имя найденного файла
		cout &lt;&lt; fileinfo->name &lt;&lt; "\n\n"; 
		// Пытаемся найти следующий файл из группы
		MayWeWork = _findnext(done, fileinfo);        
	}
	// Вывод сообщения о количестве найденных файлов.
	cout &lt;&lt; "\nInformation: was found " &lt;&lt; count;
	cout &lt;&lt; " file(s) in folder..." &lt;&lt; path &lt;&lt; "\n\n";

	// Очистка памяти
	_findclose(done);
	delete fileinfo;
}

</example>
</lesson>
