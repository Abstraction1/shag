<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №21" next="section04.xml" prev="section02.xml" summ="0">
<h2>Указатель this.</h2>

<p>
В прошлом уроке мы выяснили, что любой метод класса самостоятельно определяет, для какого объекта он был вызван и "видит" другие члены класса без передачи их в качестве параметров. Зададимся вопросом: как это происходит?!
</p>

<p>
Ответ на этот вопрос не является секретом. Дело в том, что когда функция, принадлежащая классу, вызывается для обработки данных конкретного объекта, этой функции автоматически и неявно передается указатель на тот объект, для которого функция вызвана. Этот указатель имеет фиксированное имя <b>this</b> и незаметно для программиста определен в каждой функции класса.
</p>

<h5>Итак, кое-что о this...</h5>

<p>
1. Указатель this инициализируется значением адреса объекта, для которого вызван метод, перед началом выполнения кода этого метода.
</p>

<p>2. Имя this является служебным (ключевым) словом.</p>
<p>3. Явно описать или определить указатель this нельзя.</p>
<p>4. В соответствии с неявным определением this является константным указателем, т.е. изменять его нельзя, однако в каждой принадлежащей классу функции он указывает именно на тот объект, для которого функция вызывается.</p> 
<p>5. Объект, который адресуется указателем this, становится доступным внутри принадлежащей классу функции именно с помощью указателя this.</p>
<p>6. Внутри функции - члена класса можно явно использовать этот указатель.</p>

<p>
Указатель this является очень полезным, а иногда просто незаменимым. Например, в следующем коде указатель this позволяет компилятору разобраться в ситуации, когда имя компонента класса совпадает с именем формального параметра, принадлежащего методу:
</p>

<example>
# include &lt;iostream&gt;
using namespace std;

class Student	// Класс студент.
{    
	char name[50]; // имя
	char surname[50]; // фамилия
	int age; // возраст
public:
	//Конструктор: 
	Student(char name[],char surname[],int age)
	{ 
		// Компоненты и одноименные параметры: 
		strcpy(this->name,name);
		strcpy(this->surname,surname);
		this->age=age;
	}
	void Show()
	{ 
		// Здесь this является необязательным,
		// однако использовать его можно
		cout &lt;&lt; "\nNAME - " &lt;&lt; this->name; 
		cout &lt;&lt; "\nSURNAME - " &lt;&lt; this->surname; 
		cout &lt;&lt; "\nAGE - " &lt;&lt; this->age;
		cout &lt;&lt; "\n\n";
	}
}; 

void main(void)
{ 
	Student A("Ivan","Sidoroff",25);	
	A.Show();
}
</example>

<p>
Сейчас мы только познакомились с указателем this. Более широкое применение он еще найдет в последующих уроках.
</p>

</lesson>