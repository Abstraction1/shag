<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №25" next="section02.xml" prev="index.xml" summ="1">
<h2>Перегрузка оператора -></h2>

<p>Мы надеемся, что вы помните, что в C++ можно перегрузить почти все операторы, за исключением нескольких. Во всяком случае, оператор -&gt; перегружается, и это имеет значение крайне важное. Кстати, этот оператор называется селектором (member selector). Рассмотрим пример: 
</p>

<example>
#include &lt;iostream&gt;
using namespace std;
// класс, указатель на который
// будет инкапсулирован
class Temp
{
	int TEMP;	
	public:
		//конструктор
		Temp(){TEMP=25;}
		//функция показа на экран
		void TempFunction(){
			cout&lt;&lt;"TEMP = "&lt;&lt;TEMP&lt;&lt;"\n\n";
		} 
		//функция установки значения
		void TempSet(int T){
			TEMP=T;
		}
};

// класс, инкапсулирующий указатель
class MyPtr
{
	//указатель на класс Temp
	Temp*ptr;   

public:
	//конструктор
	MyPtr(Temp*p=NULL){
		ptr=p;
	}

	// Оператор преобразования типа
	// от инкапсулированного к инкапсулирующему
	operator Temp*(){
		return ptr;
	};
	// Оператор селектора ->
	// который позволит обратиться 
	// напрямую к "спрятанному"
	// указателю
	Temp* operator->(){
		return ptr;
	}
	//оператор ++ для смещения указателя вперед
	MyPtr operator++(){
		ptr++;
		return *this;
	}
    
};

void main ()
{
	//создание нового объекта
	Temp*main_ptr = new Temp;
	//простое обращение к членам
	//объекта через "родной" указатель
	main_ptr->TempFunction();

    //создание объекта класса-указателя
	MyPtr pTemp(main_ptr);
	//обращение через класс-указатель
	pTemp->TempFunction();

	//создание массива объектов
	//инкапсулируемого класса
	Temp*arr_=new Temp[3];
	
	//заполнение вышеозначенного массива 
	//значениями от 0 до 2 
	for(int i=0;i&lt;3;i++) arr_[i].TempSet(i);
	
	//создание объекта класса указателя
	//и запись в него адреса массива
	//(здесь работает преобразование типа)
	MyPtr arr_temp=arr_;	
	//сдвиг на один элемент вперед
	arr_temp++;
	//демонстрация результата
	arr_temp->TempFunction();
	
	//удаление объектов
	delete main_ptr;
	delete[]arr_;

}

Результат работы программы

TEMP = 25

TEMP = 25

TEMP = 1
</example>

<p>
Итак, обсудим результат: У нас есть класс Temp, который может иметь экземпляры, обладает некоторым членом TEMP и минимальным набором функций для работы с ним. Кроме того, мы создали класс объекта-указателя MyPtr, в котором храним обычный указатель, но доступ к нему ограничиваем, и перегружаем для него операторы:
</p>

<ol>
   <li>Оператор приведения типа от Temp к MyPtr</li> 
   <li>Оператор -> (selector).</li> 
   <li>Оператор ++, реализующий сдвиг указателя на один шаг вперед.</li>
</ol>
      
<p>Рассмотрим положительные моменты - мы получили класс объектов-указателей, которые можно смело применять вместо настоящих. Это удобно, т.к. все функции для работы с указателем можно инкапсулировать в этом классе. Однако есть еще одно широко распространенное применение данной конструкции, с которым мы с вами познакомимся в следующем разделе урока. Вперед!</p>
     

</lesson>