<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №14" next="section3.xml" prev="section1_2.xml" summ="0">	  

<h2>Функции работы со строками из бибилиотеки обработки строк.</h2>
<p>Здесь мы перечислим основные функции, предназначенные для работы со строками. Большинство прототипов этих функций (если не оговорено особо) находится в заголовочном файле <b>string.h</b>.</p>
<p><b>int getchar();</b> - Возвращает значение символа(если он есть), который пользователь набрал на клавиатуре. После ввода символа нужно нажать клавишу <b>Enter</b>. Заголовочный файл - <b>stdio.h</b></p>
<p><b>int getch();</b> - Аналогично предыдущему, только символ на экране не отображается. Используется чаще для организации задержки выполнения программы. Заголовочный файл - <b>conio.h</b></p>
<p><b>int putchar(int c);</b> - Выводит символ <b>c</b> на экран. В случае успеха возвращает сам символ <b>c</b>, в противном случе - <b>EOF</b>. Заголовочный файл - <b>stdio.h</b></p>
<p><b>char *gets(char *s);</b> - Читает символы, включая пробелы и табуляции, до тех пор, пока не встретится символ новой строки, который заменяется нулевым символом. Последовательность прочитанных символов запоминается в области памяти, адресуемой аргументом <b>s</b>. В случае успеха возвращает аргумент <b>s</b>, в случае ошибки - нуль. Заголовочный файл - <b>stdio.h</b></p>
<p><b>int puts(const char *s);</b> - Выводит строку, заданную аргументом <b>const char *s</b>. Заголовочный файл - <b>stdio.h</b></p>
<p><b>char *strcat(char *dest, const char *scr);</b> - Объединяет исходную строку <b>scr</b> и результирующую строку <b>dest</b>, присоединяя первую к последней. Возвращает <b>dest</b>.</p>
<p><b>char *strncat(char *dest, const char *scr, int maxlen);</b> - Объединяет <b>maxlen</b> символов исходной строки <b>scr</b> и результирующую строку <b>dest</b>, присоединяя часть первой к последней. Возвращает <b>dest</b>.</p>
<p><b>char *strchr(const char *s, int c);</b> - Ищет в строке <b>s</b> первое вхождение символа <b>c</b>, начиная с начала строки. В случае успеха возвращает указатель на найденный символ, иначе возвращает нуль.</p>
<p><b>char *strrchr(const char *s, int c);</b> - Аналогично предыдущему, только поиск осуществляется с конца строки.</p>
<p><b>int strcmp(const char *s1, const char *s2);</b> - Сравнивает две строки. Возвращает отрицательное значение, если <b>s1&lt;s2;</b> нуль, если <b>s1==s2;</b> положительное значение, <b>если s1&gt;s2</b>. Параметры - указатели на сравниваемые строки.</p>
<p><b>int stricmp(const char *s1, const char *s2);</b> - Аналогично предыдущему, только сравнение осуществляется без учета регистра символов.</p>
<p><b>int strncmp(const char *s1, const char *s2, int maxlen);</b> - Аналогично предыдущему, только сравниваются первые <b>maxlen</b> символов.</p>
<p><b>int strnicmp(const char *s1, const char *s2, int maxlen);</b> - Аналогично предыдущему, только сравниваются первые <b>maxlen</b> символов без учета регистра.</p>
<p><b>int strcspn(const char *s1, const char *s2);</b> - Возвращает длину максимальной начальной подстроки строки <b>s1</b>, не содержащей символов из второй строки <b>s2</b>.</p>

<p><b>int strlen(const char *s);</b> - Возвращает длину строки <b>s</b> - количество символов, предшествующих нулевому символу. </p>
<p><b>char *strlwr(char *s);</b> - Преобразует все прописные (большие) буквы в строчные (малые) в строке <b>s</b>. </p>
<p><b>char *strupr(char *s);</b> - Преобразует все строчные (малые) буквы в прописные (большие) в строке <b>s</b>. </p>
<p><b>char *strnset(char *s, int c, int n);</b> - Заполняет строку <b>s</b> символами <b>c</b>. Параметр <b>n</b> задает количество размещаемых символов в строке.</p>
<p><b>char *strpbrk(const char *s1, const char *s2);</b> - Ищет в строке <b>s1</b> первое вхождение любого символа из строки <b>s2</b>. Возвращает указатель на первый найденный символ или нуль - если символ не найден.</p>
<p><b>char *strrev(char *s);</b> - Изменяет порядок следования символов в строке на обратный (кроме завершающего нулевого символа). Функция возвращает строку <b>s</b>.</p>
<p><b>char *strset(char *s, int c);</b> - Заменяет все символы строки <b>s</b> заданным символом <b>c</b>.</p>
<p><b>int strspn(const char *s1, const char *s2);</b> - Вычисляет длину максимальной начальной подстроки строки <b>s1</b>, содержащей только символы из строки <b>s2</b>.</p>
<p><b>char *strstr(const char *s1, const char *s2);</b> - Ищет в строке <b>s1</b> строку <b>s2</b>. Возвращает адрес первого символа вхождения строки <b>s2</b>. Если строка отсутствует - возвращает нуль.</p>
<p><b>char *strtok(char *s1, const char *s2);</b> - Делит исходную строку <b>s1</b> на <i>лексемы (подстроки)</i>, разделенные одним или несколькими символами из строки <b>s2</b>.</p>
<p><b>double atof(const char *s);</b> - Преобразует строку <b>s</b> в число с плавающей точкой типа <b>double</b>. Заголовочный файл - <b>math.h</b></p>
<p><b>int atoi(const char *s);</b> - Преобразует строку <b>s</b> в число типа <b>int</b>. Возвращает значение или нуль, если строку преобразовать нельзя. Заголовочный файл - <b>stdlib.h</b></p>
<p><b>long atol(const char *s);</b> - Преобразует строку <b>s</b> в число типа <b>long</b>. Возвращает значение или нуль, если строку преобразовать нельзя. Заголовочный файл - <b>stdlib.h</b></p>
<p><b>char *itoa(int value, char *s, int radix);</b> - Преобразует значение целого типа <b>value</b> в строку <b>s</b>. Возвращает указатель на результирующую строку. Значение <b>radix</b> - основание системы счисления, используемое при преобразовании (от 2 до 36). Заголовочный файл - <b>stdlib.h</b></p>

</lesson>
