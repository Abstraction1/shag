<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №6" next="section3.xml" prev="index.xml" summ="0">	  

<h2>Необходимость группировки данных.</h2>
<p>
Сегодня мы поговорим с вами на тему хранения данных. На одном из первых занятий мы узнали о  существовании переменной и определили ее как отрезок оперативной памяти для размещения информации. Несомненно, что нормальная программа не может существовать без переменных, однако, порой простые переменные не решают проблемы оперирования данными. А, дело все в том, что каждая из переменных, рассмотренных в предыдущих уроках способна одновременно хранить лишь один элемент информации. Чтобы сохранить второй, необходимо создать еще одну переменную. Но что делать, если нужно хранить множество элементов однородных типов данных. Будет весьма неудобно создавать для каждого элемента переменную. А, что если требуется работать со многими сотнями элементов? Задача очень быстро становится невыполнимой. Согласитесь, создавать несколько сотен переменных - безумие.
</p>
<p>Как же решить такую казалось бы непростую задачку?! В нашем случае решением являются, так называемые массивы. Рассмотрим определение и особенности.</p>
<h3>Понятие массива.</h3>
<p><strong>1. Массив – это совокупность переменных, которая позволяет хранить несколько однотипных значений.</strong></p>
<p><strong>2. Все значения этой совокупности объединены под одним именем.</strong></p>
<p><strong>3. При этом каждая переменная в массиве  является самостоятельной единицей под названием - <i>элемент</i>. </strong></p>
<p><strong>4. Каждый элемент имеет свой порядковый номер - <i>индекс</i>. По индексу можно обращаться к конкретному элементу массива. </strong></p>
<p><strong>5. Нумерация элементов в массиве начинается с нуля.</strong></p>
<h3>Схема.</h3>
<p>Исходя из вышеописанных утверждений - общая схема представления массива будет выглядеть так:</p>
<center><img src="images\1.jpg"/></center>

<h3>Расположение массива в памяти.</h3>
<p>Массив располагается в памяти последовательно, элемент за элементом. Сначала лежит нулевой, потом первый и т.д. Элементы располагаются по возрастанию адреса: Один элемент массива отстоит от другого на количество байт, равное базовому типу массива. Формула, по которой производится позиционирование по массиву: 
</p>

<p><strong>базовый адрес + размер базового типа * индекс;</strong></p>

<p>Если указывается неправильный адрес производится позиционирование базового адреса на адрес, вычисленный по формулам. При этом программа получает полный доступ к содержимому ячейки памяти, которая ей по сути не пренадлежит. В результате этого может произойти ошибка на этапе выполнения.</p>
<center><img src="images\2.jpg"/></center>
<p>В заключение, следует отметить, что каждый элемента массива имеет свою собственную размерность, которая напрямую зависит от типа всего массива. Например, если массив имеет тип данных int - размер каждого элемента в нем - 4 байта. Таким образом, общий размер всего массива вычисляется по формуле: 
</p>
<p><strong>ОБЩИЙ_РАЗМЕР = РАЗМЕР_ТИПА_ДАННЫХ*КОЛИЧЕСТВО_ЭЛЕМЕНТОВ_В_МАССИВЕ</strong></p>
<hr/>
<p>Теперь теоретически мы знаем о массиве почти всё. Осталось познакомиться с практической частью и убедиться, как легко и удобно создается и используется данная конструкция. Для этого переходим к следующему разделу урока.</p>
</lesson>
