<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №6" next="section4.xml" prev="section2.xml" summ="0">
<h2>Создание  массива и заполнение его данными.</h2>
<h3>Синтаксис объявления массива.</h3>
<p>Для начала, нам необходимо научиться создавать массив. А, для этого - во-первых, определить общий синтаксис. Во-вторых, выяснить, каким правилам и ограничениям  этот синтаксис подчиняется.</p>

<example>

тип_данных имя_массива[количество_элементов];</example>

<p>1. <strong>тип_данных</strong> - любой из существующих, известных вам типов данных. Именно этим типом будет обладать каждый элемент массива.</p>
<p>2. <strong>имя_массива</strong> - любое имя, которое подчиняется "правилам имен переменных" (эти правила мы рассматривали с Вами в первом уроке).</p>
<p>3. <strong>количество_элементов</strong> - число элементов в массиве. На данном месте должно находиться - <strong><u>целочисленное константное значение.</u></strong> Таким значением может быть - либо целочисленный литерал, либо константная целочисленная переменная.</p>
<tip start="Примечание">Обратите внимания, что количество элементов массива должно быть определенно на этапе создания программы. Другими словами, задать размерность такого массива в зависимости от какого-то условия или по решению пользователя невозможно. Это приведет к ошибке на этапе компиляции.</tip>
<h5>Вариант первый.</h5>
<p>Объявлен массив ar, состоящий из 5 элементов, каждый из которых имеет тип данных int.</p>
<example>int ar[5];</example>

<h5>Вариант второй.</h5>
<p>Объявлена константа size, значение которой равно 3, а затем, массив br, состоящий из 3 элементов, каждый из которых имеет тип данных double.</p>
<example>
const int size=3;
double br[size];</example>
<tip start="Примечание"> Мы рекомендуем вам использовать вторую форму записи, так как она является более корректной и удобной.</tip>
<h3>Обращение к элементам массива.</h3>
<p>Рассмотрим, как обратиться к конкретному элементу массива.</p>
<example>

<strong>запись значения</strong>

имя_массива[индекс_элемента]=значение;

<strong>получение значения</strong>

cout&lt;&lt;имя_массива[индекс_элемента];
</example>
<p>Здесь, на место индекса_элемента может быть подставленно <strong>ЛЮБОЕ</strong> целочисленное значение, в том числе выражение, результатом которого является целое число.</p>

<example>
const int size=5;
int ar[size]; // создание массива
ar[2]=25; // запись значения 25 в элемент с индексом 2
cout&lt;&lt;ar[2]&lt;&lt;"\n"; // вывод на экран значения элемента с индексом 2 - 25
</example>
<tip start="Примечание">Еще раз напоминаем - нумерация элементов в массиве начинается с нуля!!! Таким образом в массиве из 5 элементов - последний элемент имеет индекс 4. Выходить за пределы массива нельзя, это приведет к ошибке на этапе выполнения.</tip>

<h3>Варианты инициализации массива.</h3>

<p>Заполнить массив данными можно двумя способами:</p>

<p><strong>Первый способ</strong> – инициализация при создании.</p>
<p><strong>тип_данных имя_массива[количество элементов]={значение1, значение2, значение3, … значение n};</strong></p>
<example>
const int size=3; 
int ar[size]={1,30,2};
</example>

<p>При такой форме инициализации есть некоторые особенности:</p>

<p>1. Все значения списка инициализации имеют  такой же тип данных, как и сам массив, поэтому при создании количество элементов можно не указывать. Операционная система сама определит размер массива исходя из числа элементов в списке инициализации.</p>
<p><strong>тип_данных имя_массива[]={значение1, значение2, значение3, … значение n};</strong></p>
<example>
int ar[]={1,30,2};	//В данной строке массив автоматически получит размер 3.
</example>

<p>2. Если число элементов в списке инициализации меньше чем число элементов массива, то оставшиеся значения автоматически заполняются нулями:</p>
<example>int ar[5]={1,2,3};</example>
<p>такая запись эквивалентна записи:</p>
<example>int ar[5]={1,2,3,0,0};</example>

<p>3. Если значений в списке инициализации больше чем количество элементов массива, то происходит ошибка на этапе компиляции:</p>
<example>int array[2]={1,2,3};	// ошибка на этапе компиляции</example>



<p><strong>Второй способ</strong> - инициализация массива при помощи цикла.</p>
<p>В этом случае заполнить массив значениями, можно с помощью пользователя.</p>
<example>
#include&lt;iostream&gt;
using namespace std;
void main()
{
	const int size=3;
	int ar[size];	//создание массива из трех элементов
	for (int i=0;i&lt;size;i++) 	//цикл перебирающий элементы массива
	{
		cout&lt;&lt;"Enter element\n";
		
		//на каждой итерации цикла пользователю подставляется элемент
		//с индексом i для заполнения. секрет в том, что i - каждый раз
		//новое значение 
		cin&gt;&gt;ar[i];	
	}
}
</example>
<h3>Показ содержимого массива на экран.</h3>
<p>Вы, наверняка уже догадываетесь, что большинство операций с массивами удобнее проводить с помощью циклов, по очереди перебирая элементы. Это действительно так и показ на экран не вляется исключением. Приведем пример полной программы, которая создает, заполняет и показывает на экран массив.</p>
<example>
#include&lt;iostream&gt;
using namespace std;
void main()
{
	const int size=3;
	int ar[size];	//создание массива из трех элементов
	for (int i=0;i&lt;size;i++) 	//цикл перебирающий элементы массива
	{
		cout&lt;&lt;"Enter element\n";
		
		//на каждой итерации цикла пользователю подставляется элемент
		//с индексом i для заполнения. секрет в том, что i - каждый раз
		//новое значение 
		cin&gt;&gt;ar[i];	
	}
	cout&lt;&lt;"\n\n";
	for (i=0;i&lt;size;i++) 	//цикл перебирающий элементы массива
	{
		cout&lt;&lt;ar[i]&lt;&lt;"\n";	//показ элемента с индексом i на экран	
	}
}
</example>
<hr/>
<p>Теперь, когда мы с вами познакомились с массивами, давайте перейдем к следующим разделам урока и рассмотрим несколько практических примеров работы с ними.</p>
</lesson>