<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №34" next="hometask.xml" prev="section05.xml" summ="0">
<h2>Детальный анализ итератора. </h2>
<p>Итак, пришла пора познакомиться поближе.</p>
<p>
Итератор - это своеобразный указатель общего назначения. На самом деле простые указатели являются частным случаем итераторов, позволяющих работать с различными данными универсальным способом. Любая функция, принимая в качестве параметров итераторы, при их обработке не задумывается о типе переменных, на которые эти итераторы указывают. Итераторы позволяют получить доступ к содержимому контейнера так же, как указатели используются для доступа к элементам массива.
</p>


<h5>Типы итераторов.</h5>

<ul>
<li>
Входные (input) - служат для чтения адресуемых данных. Поддерживают операции равенства, разыменования и инкремента. 
==, !=, *i, ++i, i++, *i++.
</li>
<li>
Выходные (output) - адресуют объекты, в которые данные должны быть записаны. Поддерживают операции разыменования, допустимые только с левой стороны присваивания, и инкремента. 
++i, i++, *i = t, *i++ = t.
</li>
<li>
Однонаправленные (forward) - обладают всеми свойствами входных и выходных, а также могут перемещаться от начала последовательности адресуемых данных в конец. Поддерживают все операции итераторов ввода/вывода и, кроме того, позволяют без ограничения применять присваивание. 
==, !=, =, *i, ++i, i++, *i++.
</li>
<li>
Двунаправленные (bidirectional) - обладают свойствами однонаправленных, но и способны перемещаться в любом направлении по цепочке данных: как вперед, так и назад. Имеют дополнительную операцию декремента (--i, i--, *i--).
</li>
<li>
Итераторы произвольного доступа (random access) - обладают функциональностью всех четырех других итераторов. Поддерживают операции сравнения и адресной арифметики, то есть непосредственный доступ по индексу. 
i += n, i + n, i -= n, i - n, i1 - i2, i[n], i1 &lt; i2, i1 &lt;= i2, i1 &gt; i2, i1 &gt;= i2.
</li>
</ul>

<p>
Рассмотрим назначение каждого вида итераторов:
</p>

<tip start="Примечание">
Кстати, указатели языка С++ также являются итераторами произвольного доступа.
</tip>

<h4>Особенности работы с итераторами.</h4>

<p><b>Итератор более старшего типа может быть подставлен вместо младшего.</b></p>

<p><b>
Применяя итераторы, важно учитывать индикатор конца диапазона (end-of-range), это элемент, идущий за концом цепочки адресуемых итератором данных. Индикатором конца диапазона может быть любое число.
</b></p>

<p><b>
К итераторам можно применить операции *, инкремента, декремента. 
</b></p>

<p><b>
Типом итератора объявляется тип iterator, который определен в различных контейнерах. 
</b></p>


</lesson>