<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №34" next="section07.xml" prev="section04.xml" summ="0">
<h2>Анализ и использование класса string. </h2>

<p>
Ну а теперь мы приступим к детальному рассмотрению классов библиотеки STL. Для начала обратим внимания на класс string или строка. Класс предоставляет методы для работы с символами и представляет собой массив символов с поддержкой строк любой длины.
</p>

<h5>
Список наиболее часто используемых функций класса string.
</h5>

<ul>

<li>
<b>operator[]</b>
 - доступ к конкретным символам в строке для чтения или записи.
</li>

 
<li>
<b>c_str()</b>
 - конвертация строки в char* для использования в функциях, не умеющих работать со string.
</li>
 
<li>
<b>append</b>
 - добавление символов к концу строки.
</li>

<li>
<b>operator=</b>
 - присваивание строке других строк, символьных массивов и даже чисел.
</li>
  
<li>
<b>insert</b>
 - вставка символов или других строк в переменную типа string.
</li>
 
<li>
<b>erase</b>
 - удаление одного или более символов из заданной строки в заданной позиции.
</li>
 
<li>
<b>replace</b>
 - замещение одного или более символов в заданной позиции.
</li>
 
<li>
<b>length(или size)</b>
 - возвращение количества символов в строке.
</li>
 
<li>
<b>empty</b>
 - определение, есть ли в строке символы.
</li>
 
<li>
<b>find</b>
 - нахождение первого вхождения символа или подстроки в данной строке.
</li>
 
<li>
<b>rfind</b>
 - аналог find, но осуществляет поиск с конца строки назад.
</li>
 
<li>
<b>find_first_of</b>
 - нахождение первого вхождения символов из набора в строке.
</li>
 
<li>
<b>substr</b>
 - возвращение подстроки.
</li>
 
<li>
<b>find_first_not_of</b>
 - нахождение первого символа в строке, не входящего в заданный набор.
</li>
 
<li>
<b>compare</b>
 - сравнение строки (также поддерживаются операторы !=, &lt;, &gt;)
</li>
 
</ul>

<p>
Класс string - является одним из самых используемых классов. Давайте разберем пример работы с ним:
</p>

<example>


#include &lt;stdio.h&gt;

#include &lt;stdlib.h&gt;

#include &lt;string&gt;

using namespace std;

void main()

{

  // Присвоить строку символов объекту типа string

  string s = "Hello world";

  // Получить первое слово в строке

  int nWordEnd = s.find(' ');

  string sub_string = s.substr(0,nWordEnd);

  // Вывести результаты

  printf("String: %s\n", s.c_str);

  printf("Sub String: %s\n", sub_string.c_str());

}
</example>

<h5>Комментарии к примеру.</h5>

<ol>
<li>
Вы можете прямо присваивать строку символов объекту string. Это упрощает использование строк с данными в программе.
</li>
<li>
Метод find найдет первое вхождение символа в строке. Возвращает метод позицию (начиная с 0) найденного символа, или -1, если подходящего символа в строке не нашлось.
</li>
<li>
Метод substr возвращает копию части строки, начинающейся с позиции, заданной первым параметром метода, и длиной, заданной во втором параметре метода. Если опустить второй аргумент, то возвратится строка символов начиная с данной позиции до конца исходной строки.
</li><li>
Для вывода строки на экран используется функция printf, выводя строку как символьный массив. Используем метод c_str() для преобразования объекта string в символьный массив.
</li></ol>
</lesson>