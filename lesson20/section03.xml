<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №20" next="hometask.xml" prev="section02.xml" summ="0">
<h2>Конструкторы и деструкторы.</h2>

<h3>Начальная инициализация объектов класса. Конструкторы.</h3>

<p>Иногда во время создания объекта его элементам необходимо присвоить начальные значения. Как вы уже знаете, сделать это непосредственно в определении класса нельзя. Решить данную проблему можно, написав функцию, которая будет присваивать начальные значения переменным класса, и вызывать эту функцию каждый раз сразу после объявления объекта, что мы благополучно сделали в примере предыдущего раздела урока.</p>

<p>Однако, в языке С++ есть механизм, позволяющий решить эту проблему иным путём. Это - конструкторы.</p>

<p>Конструктор (construct - создавать) - это специальная функция-член класса,объявленная с таким же именем, как и класс. Для конструктора не определяется тип возвращаемого значения. ДАЖЕ void!!! Рассмотрим пример создания конструктора: </p>
<example>
# include &lt;iostream&gt;
using namespace std;
class Test{
	// так как спецификатор доступа не указан
	// данная переменная будет по умолчанию закрыта
	// для доступа вне класса (private)
	int one;

	// спецификатор доступа public
	// все члены, идущие после него
	// будут открыты для доступа извне
public:
	Test(){
		one=0;
		two=0;
	} 

	// инициализировать переменные в классе 
	// при создании запрещено, поэтому мы определяем
	// метод, реализующий данное действие
	void Initial(int o,int t){
		one=o;
		two=t;
	}

	// метод показывающий переменные класса 
	// на экран
	void Show(){
		cout&lt;&lt;"\n\n"&lt;&lt;one&lt;&lt;"\t"&lt;&lt;two&lt;&lt;"\n\n";
	}
	int two;
};
void main(){

	// создается объект с типом Test
	Test obj; (здесь сработает конструктор)
	
	// показ на экран
	obj.Show(); // 0 0

	// вызывается функция, инициализирующая его свойства
	obj.Initial(2,5);

	// показ на экран
	obj.Show(); // 2 5

	// прямая запись в открытую переменную two
	// с переменной one такая запись невозможна, так
	// как доступ к ней закрыт
	obj.two=45;

	// снова показ на экран
	obj.Show(); // 2 45

}
</example>

<p>1. Конструктор автоматически вызывается при создании объекта, т.е не нужно специально его вызывать.</p>
<p>2. Основное назначение конструкторов - инициализация объектов.</p>
<p>3. Конструктор должен быть всегда public!!!</p> 
<hr/>
<p>C помощью параметров конструктору можно передать любые данные, необходимые для инициализации объектов класса.</p>

<h5>Пример. Класс, описывающий точку.</h5>
<example>
# include &lt;iostream&gt;
using namespace std;

// описание класса Point
class Point {
	int x, y; 
	// координаты точки, по умолчанию имеют 
	// уровень доступа private

public:
	// конструктор присваивает переменным класса  x и y начальные 
	// значения соответственно x0 и y0
	Point(int x0, int y0)
	{
	   x = x0;
	   y = y0;
	}

	
	// функция вывода координат точки на экран
	void ShowPoint()
	{
	   cout &lt;&lt; "\nx = " &lt;&lt; x;
	   cout &lt;&lt; "\ny = " &lt;&lt; y;
	}	
	
};

void main()
{
	Point A(1,3); // создаем точку А (объект типа Point) 
	// с координатами x = 1, y = 3 (вызывается конструктор Point(1, 3)
	A.ShowPoint(); // выводим координаты точки А на экран
	
}
</example>


<tip start="Примечание">При создании объекта значения параметров передаются конструктору с использованием синтаксиса, подобного обычному вызову функции.</tip>

<h5>Еще кое-что о конструкторах...</h5>

<p>1. Конструктор без параметров называют конструктором по умолчанию. Такой конструктор обычно присваивает переменным-членам класса наиболее часто используемые значения.</p>

<example>
	Point()
	{
	   x = 0;
	   y = 0;
	}

</example>

<p>2. Для каждого класса может существовать только один конструктор по умолчанию.</p> 

<p>3. Если для класса не определено никакого конструктора, компилятор создает конструктор по умолчанию. Такой конструктор не задает никаких начальных значений, он просто существует :))).</p> 

<h3>Деструкторы.</h3>

<p>Деструктор выполняет функцию, противоположную функции конструктора. Деструктор (destruct - разрушать) - это специальная функция класса, которая автоматически вызывается при уничтожении объекта - например, когда объект выходит из области видимости.</p>

<p>Деструктор может выполнять любые задачи, в момент удаления объекта. Например, если в конструкторе была динамически выделена память, то деструктор должен освободить эту память перед удалением объкта класса. 
</p>

<h5>Основные особенности при работе с деструктором.</h5>

<p>1. Деструктор не принимает никаких параметров и не возвращает никаких значений. </p>
<p>2. Класс может иметь только один деструктор.</p>

<p>И в заключении рассмотрим пример последовательности, в которой вызываются конструкторы и деструкторы.</p>

<example>
# include &lt;iostream&gt;
using namespace std;

// описание класса CreateAndDestroy
class CreateAndDestroy
{
public: 
	CreateAndDestroy(int value)  // конструктор 
	{
	  data = value;
	  cout &lt;&lt; " Object " &lt;&lt; data &lt;&lt; " constructor";
	}

	~CreateAndDestroy()    // деструктор
	{
		cout &lt;&lt; " Object " &lt;&lt; data &lt;&lt; " destructor" &lt;&lt; endl;
	}
private:
	int data;
};

void main ()
{
		
	CreateAndDestroy one(1); 
	CreateAndDestroy two(2);  
	
}

РЕЗУЛЬТАТ РАБОТЫ ПРОГРАММЫ

Object 1 constructor    
Object 2 constructor    
Object 2 destructor     
Object 1 destructor  
</example>

<p>Вывод к примеру - деструкторы вызываются в последовательности, обратной вызову конструкторов.</p>
 


</lesson>