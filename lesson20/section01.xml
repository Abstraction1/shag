<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №20." next="section02.xml" prev="index.xml" summ="1">

<h2>Основы объектно-ориентированного программирования.</h2>

<p>И, снова, здравствуйте!!! Мы очень надеемся, что вы успешно сдали экзамен по программированию на языке С и теперь можете преходить к следующему этапу обучения. А, именно, программированию на языке С++. Прежде всего, напомним некоторые истоорические факты, касающиеся этих двух языков программирования. Эту информацию вы уже получали в первом уроке, но всё же:</p>
<p>
<i><b>В 1972 году 31-летний специалист по системному программированию из фирмы Bell Labs Деннис Ритчи разработал язык программирования Си. Первое описание языка было дано в книге Б. Кернигана и Д. Ритчи, которая была переведена на русский язык. Долгое время это описание являлось стандартом, однако ряд моментов допускали неоднозначное толкование, которое породило множество трактовок языка С. Для исправления этой ситуации при Американском национальном институте стандартов (АNSI) был образован комитет по стандартизации языка С.
В 1983 году был утвержден стандарт языка С, получивший название ANSI С. В начале 80-х годов в той же Веll Lаbоratory Бьерном Страуструпом в результате дополнения и расширения языка С был создан новый по сути язык, получивший название "С с классами". В 1983 году это название было заменено на С++.</b></i>
</p>

<p>
Вспомнили? Однако история создания языков - это не единственное различие между ними :)))). Дело всё в том, что существует два основных подхода к программированию: <b><i>процедурный и объектно-ориентированный</i></b>. Рассмотрим их определения:
</p>
<hr/>
<p>
Процедурное программирование - подход, при котором функции и переменные, относящиеся к какому-то конкретному объекту свободно располагаются в коде и никак между собой не связаны.(Язык С).
</p>
<hr/>
<p>
Объектно-ориентированное программирование - подход, при котором функции и переменные, относящиеся к какому-то конкретному объекту объединены в коде определенным образом и тесно связаны между собой. (Язык С++).
</p>
<hr/>
<p>Итак, с сегодняшнего дня мы будем заниматься объектно-ориентированным программированием. Будем называть его сокращенно ООП.</p>

<p>
ООП - концепция, которая в свое время произвела настоящую революцию в программировании. ООП предполагает, что приложение строится из набора независимых по своему внутреннему устройству частей. ООП держится на трёх основных принципах, с которыми мы с вами сейчас познакомимся.
</p>

<h3>"Кит первый" - инкапсуляция.(Encapsulation)</h3>
<p>
Принцип независимости данных в ООП называется <b>инкапсуляцией</b>. Таким образом, каждая часть может содержать собственные данные, недоступные другим частям системы. Очевидно, что абсолютно независимыми эти части быть не могут, поскольку им необходимо взаимодействовать между собой, использовать общие данные и обмениваться собственными данными.
</p>
<p>
Простой пример - живой организм, состоящий из множества живых клеток, каждая из которых имеет свое собственное поведение и свои собственное устройство, но взаимодействующая с другими клетками и обменивающаяся с ними веществами. В программировании такой живой организм - это приложение, а клетка - объект, вещества - данные, а пути взаимодействия - методы(функции) и события.
</p>

<p>
Попробуем сформулировать определение объекта:
</p>

<p><b>Объект - это некоторая уникальная единица имеющая свои переменные и функции, эти переменные обрабатывающие".</b></p>

<p>
Для создания объекта необходимо определить некий тип данных, который будет использоваться в программе и каждая переменная этого типа (экземпляр) ,будет представлять собой объект. В принципе, как объект можно представить тип данных - структура. Надеемся, что вы еще помните, что это такое. В структуре все данные, касающиеся одного объекта собраны воедино под одним именем, являющим собой пользовательский тип данных. В С++ таким типом данных будет <b>КЛАСС</b>. 
</p>
<p>Представьте себе черный ящик. С точки зрения программирования это объект. Но, что же тогда является классом, если ящик-объект? Класс в данном случае - это чертеж, по которому строится этот ящик. Теперь подумаем, что может относится к этому черному ящику. Совершенно очевидно, что у этого черное ящика есть некоторые свойства. Во-первых его форма, а во вторых то, что в нем лежит и механизм с помощью которого он закрывается и открывается и с помощью которого содержимое из него извлекается. 
</p><p>
В программировании свойства так и называются - свойства. А, способы извлечения содержимого, применимые к этому ящику - это методы. C помощью свойств мы работаем с внутренними данными, читаем и устанавливаем значения, а методы - это те действия, которые может выполнять сам объект, то есть в нашем примере, мы нажимаем кнопку на ящике, которая "вызывает метод" - открыть ящик и ящик открывается самостоятельно. Другими словами, метод, это функция, принадлежащая объекту и выполняемая самим объектом.
</p>

<p>
Итак, резюмируем, инкапсуляция - механизм, с помощью которого все свойства и методы, относящиеся к одному определенному объекту собраны вместе под общим именем (типом), который мы будем называть - классом.
</p>

<h3>"Кит второй" - наследование.(Inheritance)</h3>
<p> 
Для начала дадим определение данному термину:
</p>

<p>
<b>Наследование - это процесс, с помощью которого, один объект может наследовать свойства и методы другого объекта в дополнение к своим свойствам и методам.</b>
</p>

<p>
Давайте продолжим анализировать черный ящик. Предположим, на основе черного ящика мы собираемся создать красочную упаковку (коробку) для подарка. Для этого мы просто добавим к черному ящику те особенности, которые характерны для подарочной упаковки. Например, цвет. Такие характеристики, как форма и размер, а также возможность открываться и закрываться имеются и у ящика и у коробки. Поэтому, не имеет смысл описывать их повторно, достаточно просто отнаследовать "коробку" от "ящика". В этом и заключается главное преимущество использования механизма наследования. Мы сначала создаем некую простую конструкцию, а затем добавляя к ней новые свойства и методы, получаем новый усовершенствованный объект. 
</p>

<h3>"Кит третий" - полиморфизм.(Polymorphism)</h3>
<p>
Полиморфизм - способность объекта вести себя по-разному, в зависимости от ситуации и реагировать на определенное действие строго специфичным для себя образом.
</p>

<p>
Банальная ситуация - вы приходите в магазин, что бы купить колбасу. Выбираете продукт. Если продавец - ваш знакомый, он подскажет вам - стоит или нет брать данный товар. Если - абсолютно чужой человек, равнодушно отрежет кусок. Продавец ведет себя так или иначе, в зависимости от ситуации. Так и наш с вами объект - самостоятельный тип данных будет различным образом реагировать на внешние раздражители. Сейчас вам немного сложно понять, как это будет происходить. Однако с принципом полиморфизма, вы уже знакомы, вспомните - прегруженные функции. Функция в зависимости, от переданных в нее параметров вызывала ту, или иную свою версию.  
</p>

<hr/>
<p>
Итак, с теоретической частью покончено - пора переходить к практической.
</p>

</lesson>
