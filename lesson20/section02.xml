<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №20" next="section03.xml" prev="section01.xml" summ="0">	  

<h2>Знакомство с классами.</h2>

<h3>Определение класса и cоздание его объекта.</h3>

<p>Класс - это производный структурированный тип, введенный программистом на основе уже существующих типов. Другими словами, механизм классов задает некоторую структурированную совокупность типизированных данных и позволяет определить набор операций над этими данными.</p> 

<p>Общий синтаксис класса можно определить с помощью конструкции:</p> 

<example>
   class имя_класса { список_компонентов };
</example>

<p>1. имя_класса - произвольно выбираемый идентификатор</p> <p>2. список_компонентов - определения и описания типизированных данных и принадлежащих классу функций. Компонентами класса могут быть данные, функции, классы, перечисления, битовые поля и имена типов. Вначале для простоты будем считать, что компоненты класса - это типизированные данные (базовые и производные) и функции.</p>
<p>3. Заключенный в фигурные скобки список компонентов называют телом класса.</p>
<p>4. Телу класса предшествует заголовок. В простейшем случае заголовок класса включает слово class и имя.</p>
<p>5. Определение класса всегда заканчивается точкой с запятой.</p>
 
<p>Итак, принадлежащие классу функции мы будем называть <b>методами класса</b> или <b>компонентными функциями</b>. Данные класса - <b>компонентными данными</b> или <b>элементами данных класса</b>. </p>

<p>Вернемся к определению: класс - это тип, введенный программистом. А, так как, каждый тип служит для определения объектов, определим синтаксис создания объекта класса.</p>

<example> 

   имя_класса имя_объекта;
</example>

<p>
Определение объекта класса предусматривает выделение участка памяти и деление этого участка на фрагменты, соответствующие отдельным элементам объекта, каждый из которых отображает отдельный компонент данных класса. 
</p>

<h3>Способы доступа к компонентам класса.</h3>
<p>Существует несколько уровней доступа к компонентам класса. Рассмотрим два основных.</p>
<p><b>public</b> - члены класса открыты для доступа извне.</p>
<p><b>private</b> - члены класса закрыты для доступа извне.</p>

<p>Давайте расшифруем.</p>

<p>По умолчанию все переменные и функции, принадлежащие классу, определены как закрытые (private). Это означает, что они могут использоваться только внутри функций-членов самого класса. Для других частей программы, таких как функция main(), доступ к закрытым членам запрещен. <i>Это, кстати, единственное отличие класса от структуры - в структуре все члены по умолчанию - public.</i></p>

<p>С использованием спецификатора доступа public можно создать открытый член класса, доступный для использования всеми функциями программы (как внутри класса, так и за его пределами). </p>

<p>
Синтаксис для доступа к данным конкретного объекта заданного класса (как и в случае структур), таков: 
</p>

<example> 

   имя_объекта.имя_члена класса;
</example>

<h3>Пришло время примера...</h3>

<example>
# include &lt;iostream&gt;
using namespace std;
class Test{
	// так как спецификатор доступа не указан
	// данная переменная будет по умолчанию закрыта
	// для доступа вне класса (private)
	int one;

	// спецификатор доступа public
	// все члены, идущие после него
	// будут открыты для доступа извне
public: 

	// инициализировать переменные в классе 
	// при создании запрещено, поэтому мы определяем
	// метод, реализующий данное действие
	void Initial(int o,int t){
		one=o;
		two=t;
	}

	// метод показывающий переменные класса 
	// на экран
	void Show(){
		cout&lt;&lt;"\n\n"&lt;&lt;one&lt;&lt;"\t"&lt;&lt;two&lt;&lt;"\n\n";
	}
	int two;
};
void main(){

	// создается объект с типом Test
	Test obj;
	// вызывается функция, инициализирующая его свойства
	obj.Initial(2,5);

	// показ на экран
	obj.Show(); // 2 5

	// прямая запись в открытую переменную two
	// с переменной one такая запись невозможна, так
	// как доступ к ней закрыт
	obj.two=45;

	// снова показ на экран
	obj.Show(); // 2 45

}
</example>

<p>
Вышеописанный пример вполне интуитивно прост, однако, выделим один из главных моментов - <b>переменные класса нет необходимости передавать в методы класса в качестве параметров, так как они видны в них автоматически.</b>
</p>
</lesson>
