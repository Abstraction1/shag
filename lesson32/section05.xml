<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №32" next="section06.xml" prev="section04.xml" summ="0">
<h2>Виртуальный базовый класс. </h2>
<p>
Иногда при множественном наследовании возникают ситуации, когда нужен определенный контроль над тем, как наследуются базовые классы. Рассмотрим пример. 
</p>

<example>

  class A {

	public:
    	int val;
  };

  class B : public A {...};

  class C : public A {...};

  class D : public B, public C{

  	public:
    	int Get_Val(){
		return val; //ошибка!
	} 

  };

</example>

<p>
В вышеописанном примере доступ к члену val неоднозначен. Компилятор не поймет на какую копию val ссылаться и поэтому просигнализирует ошибку. Для разрешения неоднозначности следует либо использовать оператор разрешения видимости, например, так:
</p> 

<example>

 int Get_Val(){ 

	return B::val;

 }

</example>

<p>
...либо использовать <b>виртуальный базовый класс</b>. Разберем на примере, как это можно сделать. Определим дерево иерархии следующим образом: 
</p>

<example>

  class A {
  	public:
    		int val;
  };

  class B : public virtual A {...};

  class C : public virtual A {...};

  class D : public B, public C {

  	public:
    		int Get_Val() {
			return val; //все работает корректно
		} 
  };

</example>

<p>
Объявление базового класса виртуальным заставляет компилятор принимать только одну копию базового класса в объявлении производного. Поэтому только одна копия члена val присутствует в классе D и оператора разрешения области видимости, для уточнения, не требуется. Виртуальные базовые классы используются только при множественном наследовании. 
</p>

<h5>Вывод</h5>

<p>
Итак, виртуальный базовый класс нужен тогда, когда производный класс наследует два (или более) класса, каждый из которых сам унаследовал один и тот же базовый класс. Без виртуального базового класса в последнем производном классе существовало бы две (или более) копии общего базового класса. Однако, благодаря тому, что исходный базовый класс делается виртуальным, в последнем производном классе представлена только одна копия базового. 
</p>
</lesson>