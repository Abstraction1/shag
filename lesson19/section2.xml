<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №19" next="index.xml" prev="section1.xml" summ="0">	  

<h2>Форматирование ввода-вывода средствами языка С++. </h2>
<p>В предыдущей теме урока  мы рассмотрели, как можно использовать функцию printf() для форматирования текста, а можно сделать то же самое при помощи средств форматирования ввода/вывода языка С++. Мы рассмотрим целых два способа.</p>
<h3>Способ первый</h3>
<p>Данный способ предусматривает использование функций для установки определенных флагов форматирования, которые перечислены в классе ios_base</p>
<example>
enum {  
skipws=0x0001,
left=0x0002,
right=0x0004,
internal=0x0008,
dec=0x0010,
oct=0x0020,
hex=0x0040,
showbase=0x0080,
showpoint=0x0100,
uppercase=0x0200,
showpos=0x0400,
scientific=0x0800,
fixed=0x1000,
unitbuf=0x2000,
stdio=0x4000        
};
</example>
<p>Рассмотрим назначение каждого из флагов.</p>
<center><img src="images\3.jpg"></img></center>
<p>Кроме флагов, существует так же набор, которые устанавливают и сбрасывают эти флаги.</p>
<ol>
<li><b>long setf(long flags);</b> - используется для установки флагов и принимает в качестве параметра рассмотренные выше флаг или флаги, соединенные между собой при помощи побитового ИЛИ. Она возвращает предыдущее значение флага. Рассмотрим пример:</li>
<example>
cout.setf(ios::hex);
cout.setf(ios::showpos);
cout&lt;&lt;123&lt;&lt;" "&lt;&lt;123.45&lt;&lt;"\n";	
cout&lt;&lt;67&lt;&lt;" "&lt;&lt;678.9&lt;&lt;"\n";
выведет на экран
	7b +123.45
	43 +678.9	
точно такого же эффекта мы добьемся после выполнения следующего кода
cout.setf(ios::hex | ios::showpos);
cout&lt;&lt;123&lt;&lt;" "&lt;&lt;123.45&lt;&lt;"\n";	
cout&lt;&lt;67&lt;&lt;" "&lt;&lt;678.9&lt;&lt;"\n";
</example>
<li><b>long unsetf(long flags);</b> - функция возвращает значение предыдущей установки флага и сбрасывает флаги, определяемые параметром flags. Пример:</li>
<example>
cout.setf(ios::showpos | ios::hex);
cout&lt;&lt;123&lt;&lt;" "&lt;&lt;123.45&lt;&lt;"\n";
cout.unsetf(ios::showpos | ios::hex);
cout&lt;&lt;123&lt;&lt;" "&lt;&lt;123.45&lt;&lt;"\n";
выведет на экран
	7b +123.45
	123 123.45
</example></ol>
<p>Кроме флага форматирования также можно установить ширину поля потока, символ для заполнения и число цифр после десятичной запятой. Для этого используются следующие функции:</p>
<p><b>int width(int len);</b> - устанавливает ширину поля и возвращает текущую ширину. Данная функция воздействует только на один вывод информации.</p>
<p><b>char fill(char ch);</b> - устанавливает текущий символ заполнения и возвращает предыдущий символ заполнения. По умолчанию используется пробел</p>
<p><b>int precision(int num);</b> - устанавливает точность чисел с плавающей точкой. Эта функция определяет количество цифр после десятичной запятой или обозначает количество выводимых цифр. Точность, установленная по умолчанию, равна 6.</p>
<example>
cout.width(10);
cout.fill('*');
cout&lt;&lt;123&lt;&lt;"\n";
cout.width(10);
cout&lt;&lt;456&lt;&lt;"\n\n";	
cout&lt;&lt;"Using precision\n";
float price1 = 20.405f;
float price2 = (float)1.9+8.0/9.0;
cout&lt;&lt;price1&lt;&lt;"\n"&lt;&lt;price2&lt;&lt;"\n\n";
cout.precision(2);
cout&lt;&lt;price1&lt;&lt;"\n"&lt;&lt;price2&lt;&lt;"\n\n";
cout.setf(ios::scientific);
cout&lt;&lt;price1&lt;&lt;"\n"&lt;&lt;price2&lt;&lt;"\n\n";

выведет на экран

	*******123
	*******456

	Using precision
	20.405
	2.78889

	20
	2.8

	2.04e+001
	2.79e+000
</example>
<h3>Второй способ. Использование манипуляторов.</h3>
<p><b>Манипуляторы</b> - специальные функции, которые позволяют изменять флаги потока. Существуют манипуляторы с параметрами и без. Если Вы используете манипуляторы с параметрами, нужно подключить файл <i>iomanip.h</i>.</p>
<p><b>Манипуляторы без параметров:</b></p>
<center><img src="images\4.jpg"></img></center>
<p><b>Манипуляторы с параметрами:</b></p>
<center><img src="images\5.jpg"></img></center>
<h5>Пример использования:</h5>
<example>
cout&lt;&lt;setw(5)&lt;&lt;setfill('*')&lt;&lt;22&lt;&lt;endl;
cout&lt;&lt;hex&lt;&lt;11&lt;&lt;endl;
Результат работы:
	***22
	b
</example>
</lesson>
