<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №8" next="HomeTask.xml" prev="section4.xml" summ="1">
<h2>Аргументы (параметры) по умолчанию.</h2>
<p>
Формальному параметру функции может быть задан аргумент по умолчанию. Это означает, что в данный аргумент значение при вызове можно не передавать. В этом случае будет использовано значение по умолчанию.
</p>											
<p>
Общий синтаксис для реализации такого подхода имеет следующий вид:
</p>					  
<example>
тип_возвращаемого_значения имя_функции(тип_арг имя_арг=значение_по_умолчанию)    
</example>

<p>Здесь <i><b>значение_по_умолчанию</b></i> и есть значение, присваиваемое аргументу, если он опущен при вызове. Разумеется, аргументов по умолчанию может быть несколько:
</p>

<example>тип_возвращаемого_значения имя_функции(арг1=значение, арг2=значение)</example>

<p>
Аргументами по умолчанию могут быть аргументы, начиная с правого конца списка параметров функции и далее последовательно слева направо без перерывов.Например:
</p>							
<example>
void foot (int i, int j = 7) ;      //допустимо

void foot (int i, int j = 2, int k) ;        //недопустимо

void foot (int i, int j = 3, int k = 7) ;    //допустимо

void foot (int i = 1, int j = 2, int k = 3); //допустимо

void foot (int i=- 3, int j);                //недопустимо

</example>	
<p>Рассмотрим пример на работу с параметрами по умолчанию.</p>
<example>
#include &lt;iostream&gt;
using namespaсe std;

// рисует линию из звездочек длиной count
void Star(int count=20){
	for(int i=0;i&lt;count;i++)
		cout&lt;&lt;'*';
	cout&lt;&lt;"\n\n";
}

void main(){

	Star(); // показ линии из 20 звездочек
	Star(5); // показ линии из пяти звездочек

}

</example>
<hr/>
<p> Вот и все на сегодня. А теперь - дерзайте!!! Теста сегодня не будет, так что за вами, только домашнее задание. Удачи!!!</p>
</lesson>
