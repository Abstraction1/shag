<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №33" next="section02.xml" prev="index.xml" summ="1">
<h2>Введение в обработку исключительных ситуаций. </h2>
<p>
В самом начале нашего знакомства с программированием, мы говорили о том, что бывает два основных вида ошибок: ошибки на этапе выполнения и ошибки на этапе компиляции. Напомним, что первый вид подразумевает ошибку синтаксиса, которую, к счастью, не пропустит компилятор. Второй же тип ошибки, является следствием неправильной работы программы. Именно об этом типе ошибок мы и поговорим в этом уроке. 
</p>
<p>
Вполне естественно, что при написании программы, мы стараемся предусмотреть возможные ситуации, при которых, во время выполнения, программа отработает некоректно. При этом, наверняка, вы используете один из стандартных, общепринятых вариантов, например:
</p>
<ol>
<li>
<b>Функция, в которой может произойти ошибка, сама её отслеживает, прекращает работу и выдаёт на экран сообщение.</b> Недостаток этого метода заключается в том, что программист, использующий функцию, при желании обработать ошибку самостоятельно и совершить в этом случае какое-либо свое действие, не сможет этого сделать. Просто потому, что функция может лежать в библиотеке и доступа к ней программист не имеет. Вследствие чего, нет возможности избавиться, например, от стандартного сообщения об ошибке.
</li>
<li>
<b>Функция, в которой может произойти ошибка, прекращает работу и возвращает код ошибки на место своего вызова в основной программе.</b> Определенно, данный способ является решением задачи. Однако, если функция может сгенерировать несколько разных ошибок в разных ситуациях, то соответственно создателю необходимо придумать некоторое количество различных кодов ошибок и описать их в документации, что тоже не очень удобно. 
</li>
</ol>
<p>
Что же делать, скажете вы?! Неужели у всех методов "отлова ошибки" одни сплошные недостатки?! Конечно же это не так. Язык С++ предоставляет нам с вами отличное средство, которое поможет плавно уйти от недостатков, описанных выше и решить проблему с ошибками на этапе выполнения раз и навсегда. Это средство носит название - обработка исключений. Итак:
</p>
<p><b>
Исключение (exception)</b> - исключительная ситуация, генерируемая программой, например, в момент возникновения ошибки.
</p>

<p>Как вы в последствии убедитесь, механизм обработки исключений является прямым устранением всех вышеуказанных недостатков. То есть, программист, который использует функцию, реализующую его, сам определяет каким образом обработать ошибку. Далее в уроке мы рассмотрим ключевые слова используемые для реализации данного механизма.</p>

<tip start="Примечание">
Следует отметить, что механизм обработки исключений  может  быть использован не только при обработке ошибочных ситуаций, но и в тех случаях, когда программисту необходимо выделить в программе какой-либо блок кода.
</tip>
</lesson>