<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="”рок є31" next="hometask.xml" prev="section08.xml" summ="0">
<h2>Ќаследование шаблонов.</h2>

<p>
–ады вам сообщить, что шаблоны классов, как и сами классы, поддерживают механизм наследовани€. ¬се основные идеи наследовани€ при этом остаютс€ неизменными, что позвол€ет построить иерархическую структуру шаблонов, аналогичную иерархии классов. 
</p>

<p>
–ассмотрим совершенно тривиальный пример, на котором продемонстрируем, каким образом можно создать шаблон класса, производный из другого шаблона. 
</p>

<example>

//класс-родитель
template &lt;class T&gt;
class Pair
{
	T a;
	T b;
	public:
	Pair (T t1, T t2);
	//...
}; 

// конструктор класса родител€
template &lt;class T&gt;
Pair &lt;T&gt;::Pair (T t1, T t2) : a(t1), b(t2)
{} 

// класс-потомок

template &lt;class T&gt;
class Trio: public Pair &lt;T&gt;
{
	T c;
	public:
	Trio (T t1, T t2, T t3);
	//...
}; 

// «аметьте, что вызов родительского конструктора
// также сопровождаетс€ передачей типа “ в качестве параметра.
template &lt;class T&gt;
Trio&lt;T&gt;::Trio (T t1, T t2, T t3): Pair &lt;T&gt; (t1, t2), c(t3)
{
}

</example>
</lesson>