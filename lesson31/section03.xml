<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №31" next="section04.xml" prev="section02.xml" summ="0">
<h2>Наследование. Основные понятия.</h2>

<p>
Начиная рассматривать вопросы наследования, нужно отметить, что любой объект призван собрать вместе свойства и поведение некоторого фрагмента решаемой задачи, связывая в единое целое данные и методы, относящиеся к этому фрагменту.
</p>

<p>
Вспомним. Каждый объект является конкретным представителем класса. Объекты одного класса имеют разные имена, но одинаковые по типам и внутренним именам данные. Объектам одного класса для обработки своих данных доступны одинаковые функции класса и одинаковые операции, настроенные на работу с объектами класса. Таким образом, класс выступает в роли типа, позволяющего вводить нужное количество объектов, имена (названия) которых программист выбирает по своему усмотрению.
</p> 

<p>
Однако, объекты разных классов и сами классы могут находиться в отношении наследования, при котором формируется иерархия объектов, соответствующая заранее предусмотренной иерархии классов. 
</p>

<p>
Иерархия классов позволяет определять новые классы на основе уже имеющихся. Имеющиеся классы обычно называют базовыми (родительскими). А, новые классы, формируемые на основе базовых - производными (классами-потомками,дочерними классами).
</p>

<p>
Производные классы получают по наследству данные и методы своих базовых классов и, конечно же, могут иметь собственные составляющие. При этом, наследуемые члены не описываются в потомке, а остаются только в базовых классах.
</p>

<p>
При наследовании некоторые имена методов данных базового класса могут быть по-новому определены в производном классе. В этом случае соответствующие компоненты базового класса становятся недоступными из производного класса. Для доступа из производного класса к компонентам базового класса, имена которых повторно определены в производном, используется операция '::' указания (уточнения) области видимости. 
</p>

<p>
Любой производный класс может, в свою очередь, становиться базовым для других классов, и таким образом формируется иерархия классов и объектов. В иерархии производный объект наследует разрешенные для наследования члены всех базовых объектов. Другими словами, у объекта имеется возможность доступа к данным и методам всех своих базовых классов. 
</p>

<p>
Тот тип наследования, о котором мы говорим, называется - одиночное наследование. Однако, в языке С++ допускается, еще один вид - множественное наследование. Множественное наследование - возможность класса наследовать члены нескольких никак не связанных между собой базовых классов. Об этом типе мы поговорим подробнее чуть позже.
</p>

<h4>Условный пример на наследование.</h4>
<p>Давайте, для начала рассмотрим пример наследования условно, что называется, "на словах".</p>

<p>
Итак, пусть есть класс "точка (позиция) на экране". Будем считать базовым классом, и на его основе построим класс "окно на экране". Данными этого класса будут унаследованные от базового класса координаты точки и две собственные переменные - ширина и высота окна. 
</p>

<p>Рассмотрим предполагаемые методы потомка, свои и полученные в наследство:</p>

<ul>
<li>Функция смещения окна вдоль оси X на DX. СВОЯ</li>
<li>Функция смещения окна вдоль оси Y на DY. СВОЯ</li>
<li>Функция получения значения координаты X левого верхнего угла. РОДИТЕЛЬСКАЯ</li>
<li>Функция получения значения координаты Y левого верхнего угла. РОДИТЕЛЬСКАЯ</li>
<li>Функция получения размера окна вдоль оси X (ширины). СВОЯ</li>
<li>Функция получения размера окна вдоль оси Y (высоты). СВОЯ</li>
<li>Конструктор - создает окно на экране с заданным именем по параметрам, определяющим левый верхний угол окна и его размеры. СВОЙ</li>
<li>Деструктор - уничтожает окно с заданным именем. СВОЙ</li>
</ul>

<p>Просто, не правда ли? Но, пока это лишь теория, а нам пора переходить к практике. Давайте только напоследок, дадим чёткое определение тому, что мы изучаем. Итак: </p>

<p>
<b>
Наследование - это механизм, посредством которого, один объект может получать свойства другого объекта и добавлять к ним черты, характерные только для него.
</b>
</p>
</lesson>