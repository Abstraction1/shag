<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №31" next="section05.xml" prev="section03.xml" summ="0">
<h2>Спецификаторы доступа при наследовании и синтаксис организации наследования.</h2>

<h4>Спецификаторы доступа.</h4>

<p>
При наследовании классов важную роль играет область доступа членов класса. Для любого класса все его члены лежат в области его действия. Тем самым любая принадлежащая классу функция может использовать любые  данные и вызывать любые принадлежащие классу функции. Вне класса в общем случае доступны только те его компоненты, которые имеют статус public. 
</p>

<p>
Напомним, что существуют следующие спецификаторы доступа к членам класса: 
</p>

<ol>
<li>Собственные (private) - методы и данные доступны только внутри того класса, где они определены.</li>

<li>Защищенные (protected) - методы и данные доступны внутри класса, в котором они определены, и дополнительно доступны во всех производных классах.</li>

<li>Общедоступные (public) компоненты класса видимы из любой точки программы, т.е. являются глобальными.</li>
</ol> 

<p>
Все вышеперечисленные спецификаторы доступа не только указываются для конкретных членов класса, но и могут быть использованны для определения статуса наследования. Для этого спецификатор устанавливают при описании производного класса непосредственно перед именем базового класса.
</p>

<p>
Соглашения о статусах доступа при разных сочетаниях базового и производного классов иллюстрирует следующая таблица:
</p>

<center><img src="images\1.jpg" ></img></center>

<h4>Синтаксис наследования.</h4>

<p>И, наконец, финальный пряник. А, именно, синтаксис создания наследуемого класса.</p>

<example>

class имя_класса : спецификатор_наследования имя_базового_класса{

	описание_класса;

};

</example>

<p>Разберём синтаксис более детально:</p>

<ul>
<li><b>имя_класса</b> - имя нового создаваемого класса.</li>
<li><b>спецификатор_наследования</b> - спецификатор доступа к наследуемым членам.</li>
<li><b>имя_базового_класса</b> - класс, от которого, необходимо отнаследоваться.</li>
<li><b>описание_класса</b> - тело нового класса.</li>
</ul>

<h4>Кое-что о конструкторах и деструкторах....</h4>

<p>Здесь мы приведем несколько утверждений, связанных с работой конструкторов и деструкторов при наследовании.</p>

<p><b>Конструктор базового класса всегда вызывается и выполняется до конструктора производного класса.</b></p>
<p><b>Деструкторы базовых классов выполняются в порядке, обратном перечислению классов в определении производного класса. Таким образом порядок уничтожения объекта противоположен по отношению к порядку его конструирования. </b></p>
<p><b>
Вызовы деструкторов для объектов класса и для базовых классов выполняются неявно и, почти никогда, не требуют никаких действий программиста.</b></p>



<p>Ну что ж, багаж знаний упакован - пора попрактиковаться.)</p>
</lesson>