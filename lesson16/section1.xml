<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №16." next="section2.xml" prev="index.xml" summ="1">

<h2>Структура. Определение структур.</h2>
<p>В самом начале изучения языка С мы с Вами познакомились с понятием <i>типы данных</i>. Сегодня мы попробуем расширить это понятие. Дело в том, что помимо стандартных типов программист может создавать свои собственные составные типы данных под названием <b>структуры</b>. Именно они и будут являться темой нашего занятия. 
</p>
<p>Структура - это множество, состоящее из одного или более объектов, возможно имеющих различные типы, объединенных под одним именем.</p>
<p>Тип данных struct - один из основных строительных блоков данных в языке. Он предоставляет удобный способ объединения различных элементов, связанных между собой логической связью.</p>
<p>Рассмотрим особенности работы со структурами на примере.</p>
<example>

#include &lt;iostream&gt;
using namespace std;
/* 
Создание пользовательского типа данных
(структуры) для хранения даты.
Все данные касающиеся одного объекта 
собраны вместе.
*/
struct date
{
	int day; //день
	int month; //месяц
	int year;//год
	int weekday; //день недели
	char mon_name[15];// название месяца
};

void main(){

	//создание объекта с типом date и инициализация его при создании
	date my_birthday={20,7,1981,1,"July"};

	// показ содержимого объекта на экран
	// обращение к отдельному члену структуры производится через
	// оператор точка (.)
	cout&lt;&lt;"________________MY BIRTHDAY____________________\n\n";
	cout&lt;&lt;"DAY "&lt;&lt;my_birthday.day&lt;&lt;"\n\n";
	cout&lt;&lt;"MONTH "&lt;&lt;my_birthday.month&lt;&lt;"\n\n";
	cout&lt;&lt;"YEAR "&lt;&lt;my_birthday.year&lt;&lt;"\n\n";
	cout&lt;&lt;"WEEK DAY "&lt;&lt;my_birthday.weekday&lt;&lt;"\n\n";
	cout&lt;&lt;"MONTH NAME "&lt;&lt;my_birthday.mon_name&lt;&lt;"\n\n";

	// Создание пустого объекта и заполнение его с клавиатуры
	date your_birthday;

	cout&lt;&lt;"DAY ? ";
	cin&gt;&gt;your_birthday.day;
	cout&lt;&lt;"MONTH ?";
	cin&gt;&gt;your_birthday.month;
	cout&lt;&lt;"YEAR ?";
	cin&gt;&gt;your_birthday.year;
	cout&lt;&lt;"WEEK DAY ?";
	cin&gt;&gt;your_birthday.weekday;
	cout&lt;&lt;"MONTH NAME ?";
	cin&gt;&gt;your_birthday.mon_name;

	cout&lt;&lt;"________________YOUR BIRTHDAY____________________\n\n";
	cout&lt;&lt;"DAY "&lt;&lt;your_birthday.day&lt;&lt;"\n\n";
	cout&lt;&lt;"MONTH "&lt;&lt;your_birthday.month&lt;&lt;"\n\n";
	cout&lt;&lt;"YEAR "&lt;&lt;your_birthday.year&lt;&lt;"\n\n";
	cout&lt;&lt;"WEEK DAY "&lt;&lt;your_birthday.weekday&lt;&lt;"\n\n";
	cout&lt;&lt;"MONTH NAME "&lt;&lt;your_birthday.mon_name&lt;&lt;"\n\n";

}
</example>

<h5>Особенности структур.</h5>

<p>1. Описание структуры начинается со служебного слова struct, за которым может следовать необязательное имя, называемое именем типа структуры (здесь это date). Это имя типа структуры используется в дальнейшем для создания конкретного объекта.</p>

<p>2. За именем типа структуры идет заключенный в фигурные скобки список элементов структуры, с описанием типа каждого элемента (элементом структуры может быть переменная, массив или структура). Элементы структуры отделяются друг от друга точкой с запятой. Например:</p>
<example>
struct date
{
  int day;
  int month;
  int year;
  int yearday;
  char mon_name[5];
};
</example>

<p>3. За правой фигурной скобкой, закрывающей список элементов, может следовать список объектов. Например, оператор struct date {...} x,y,z; определяет переменные x,y,z в качестве структур описанного типа и приводит к выделению памяти.</p>
<p>Изобразим распределение памяти для структуры x типа date:</p>

<center><img src="images\1.jpg"></img></center>


<p>4. Описание структуры, за которым не следует список объектов, не приводит к выделению памяти (как в программе выше); оно только определяет шаблон (форму) структуры. Однако, если такое описание снабжено именем типа (например, date), то это имя типа может быть использовано позднее при определении объектов структур (определение структур your_birthday и my_birthday в программе). </p>

<p>5. Структуру можно инициализировать, поместив вслед за ее определением список инициализаторов для ее компонент, заключенный в фигурные скобки. В программе таким образом инициализирована структура my_birthday. </p>
<example>

date my_birthday={20,7,1981,1,"July"};

</example>


<p>6. Обращение к определенному члену структуры производится с помощью конструкции вида: </p>
<example>

&lt;имя структуры&gt;.&lt;имя элемента&gt;

</example>

<p>7. Структуры могут вкладываться одна в другую, но <b>самовложение структур запрещено! </b></p>

<p>Например, учетная карточка служащего может выглядеть так:</p>
<example>

struct date
{
   int day; // День.
   char month[10]; // Месяц.
   int year; // Год.
};

struct person
{
   char name[namesize]; // Имя, фамилия, отчество.
   char address[adrsize]; // Домашний адрес.
   int zipcode[2]; // Почтовый индекс.
   int s_number [2]; // Код соц.обеспечения.
   int salary[4]; // Зарплата.
   date birthdate; // Дата рождения.
   date hiredate; // Дата поступления на работу.
};

</example>
<p>Структура person содержит две структуры типа date и наша программа должна содержать шаблон для структуры date. </p>
<p>Если определить переменную Nick следующим образом:</p>

<example>

struct person Nick;
</example>
<p>то Nick.birthdate.month будет обозначать месяц рождения. Операция доступа к элементу структуры "." вычисляется слева направо.</p>
<p>А, теперь, рассмотрев основы, перейдем к тому, что же можно делать со структурами. Для этого открываем следующий раздел данного урока.</p>
</lesson>
